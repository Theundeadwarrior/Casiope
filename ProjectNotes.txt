Look into SceneGraph and why they are bad!!
http://gamedev.stackexchange.com/questions/8278/what-should-be-contained-in-a-game-scene-graph/8281#8281

// ResourceManager:
//------------------------------
ResourceManager should be responsible for requesting load on the disk. It should manage dependencies.

Maybe we can have a BaseObject that has an Id and a TypeId.
We can have a file that describes the dependencies in between objects so we know in advance what dependencies we have before loading the objects.
We can load all the objects needed in an area and patch the pointers using that table.

A model might have multiple meshes and textures.

**Investigate if we want to do Render Passes where the depth prepass would be one of them as well as the light accumulation and the grid comp.

- We can define all the materials in the data and when we load the world, we can load all the materials at the same time (build a buffer with all the material properties)
- Don't need to change materials if we render an object with the same material.


// TRANSPARENCY
//---------------------------------------------------
There are 3 options:
- The first one is using an accumulation buffer and 2 render pass, one with everything at threshold alpha = 0.75, another time with threshold alpha = 0.25. Then we combine the 2 buffers.
- We can also sort all tranparent blocks by closestness to the player and render those first.
- We can also use some fancy shit with fragment memory and compute shaders...


// STATE
//---------------------------------------------------
Need to separate the states of the engine so we can have a "game" state and a "loading" state and a "main menu" state.


// WORLD WRAPPING
//---------------------------------------------------
- We just need to render the other side of the world and once we cross over, move the player to the real coordinates.

// Chunk loading:
- ChunkManager should be responsible to load/unload chunks, generate them if needed and save them. 

- We should have 1 queue with jobs (with type load/unload).
